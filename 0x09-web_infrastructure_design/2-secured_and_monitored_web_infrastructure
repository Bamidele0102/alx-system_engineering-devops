Link to the file: https://github.com/Bamidele0102/alx-system_engineering-devops/blob/7edaab77120e4c95efb09fe1ce771b8ab5122be9/0x09-web_infrastructure_design/images/2-secured_and_monitored_web_infrastructure.png
-----------------


Questions:
----------
What are firewalls for?
-   Firewalls:

    Why adding it: Firewalls are added to enforce security policies and control the incoming and outgoing network traffic to and from the servers. They act as a barrier between the internal network and the external internet, protecting against unauthorized access, attacks, and data breaches.
What are firewalls for: Firewalls monitor and filter network traffic based on predefined rules and policies, blocking or allowing traffic based on criteria such as IP addresses, port numbers, protocols, and application types. They help prevent malicious actors from gaining unauthorized access to the servers and protect sensitive data from being compromised.

Why is the traffic served over HTTPS?
Traffic Served over HTTPS:

    Why serving traffic over HTTPS: HTTPS encrypts the data transmitted between the server and the client, providing confidentiality, integrity, and authenticity of the exchanged information. It protects sensitive data, such as login credentials, personal information, and payment details, from eavesdropping, tampering, and man-in-the-middle attacks.

Why it's important: Serving traffic over HTTPS ensures the security and privacy of user data, builds trust with users, and helps comply with privacy regulations and security best practices.


What monitoring is used for?
    Monitoring is used to track the performance, availability, and health of the infrastructure components in real-time. It helps identify issues, diagnose problems, and ensure optimal performance and reliability of the services.

How the monitoring tool is collecting data?
- Monitoring tools collect data through various methods, including:
- Polling: Regularly querying servers and services for metrics such as CPU usage, memory utilization, disk space, and network traffic.
- Log monitoring: Parsing log files generated by servers and applications to extract relevant information about system events, errors, and performance metrics.
- Agent-based monitoring: Installing lightweight monitoring agents on servers to collect and transmit real-time metrics and telemetry data to a centralized monitoring system.

Explain what to do if you want to monitor your web server QPS?
- To monitor the web server's QPS, you can:
Configure monitoring tools to collect and track the number of HTTP requests or transactions processed by the web server per second.
- Set up alerts and thresholds to notify administrators when QPS exceeds predefined limits or thresholds, indicating potential performance issues or traffic spikes.
- Analyze historical data and trends to identify patterns, peaks, and trends in web server traffic, helping optimize capacity planning and resource allocation.


Why terminating SSL at the load balancer level is an issue?
- Terminating SSL at the load balancer means decrypting encrypted HTTPS traffic at the load balancer before forwarding it to backend servers. This can be problematic because:
- It increases the load on the load balancer, as it needs to perform encryption/decryption for each request.
- It reduces end-to-end encryption between clients and backend servers, potentially exposing sensitive data if there's a breach or compromise at the load balancer level.

Why having only one MySQL server capable of accepting writes is an issue?
- Relying on a single MySQL server for write operations introduces a single point of failure and scalability bottleneck. Issues include:
- Increased risk of data loss and downtime if the MySQL server fails or becomes unavailable.
- Limited scalability and performance, as a single server may struggle to handle high write loads or growing data volumes.

Why having servers with all the same components (database, web server and application server) might be a problem?

- Deploying servers with identical components may lead to several issues, including:
- Limited fault tolerance and resilience, as failures or issues affecting one component (e.g., a web server crash) may impact the entire server and all its components.
- Inefficient resource utilization, as different components may have varying resource requirements (e.g., CPU, memory, disk space), but servers are provisioned uniformly with the same resources for each component.
- Reduced flexibility and scalability, as it may be challenging to independently scale or upgrade individual components without affecting others.



